// Code generated by MockGen. DO NOT EDIT.
// Source: ./state_converter.go
//
// Generated by this command:
//
//	mockgen -source=./state_converter.go --destination=../state_converter_mock_test.go --package=statereader
//

// Package statereader is a generated GoMock package.
package statereader

import (
	io "io"
	reflect "reflect"

	stateconverter "github.com/klothoplatform/klotho/pkg/infra/state_reader/state_converter"
	gomock "go.uber.org/mock/gomock"
)

// MockStateConverter is a mock of StateConverter interface.
type MockStateConverter struct {
	ctrl     *gomock.Controller
	recorder *MockStateConverterMockRecorder
}

// MockStateConverterMockRecorder is the mock recorder for MockStateConverter.
type MockStateConverterMockRecorder struct {
	mock *MockStateConverter
}

// NewMockStateConverter creates a new mock instance.
func NewMockStateConverter(ctrl *gomock.Controller) *MockStateConverter {
	mock := &MockStateConverter{ctrl: ctrl}
	mock.recorder = &MockStateConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateConverter) EXPECT() *MockStateConverterMockRecorder {
	return m.recorder
}

// ConvertState mocks base method.
func (m *MockStateConverter) ConvertState(arg0 io.Reader) (stateconverter.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertState", arg0)
	ret0, _ := ret[0].(stateconverter.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertState indicates an expected call of ConvertState.
func (mr *MockStateConverterMockRecorder) ConvertState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertState", reflect.TypeOf((*MockStateConverter)(nil).ConvertState), arg0)
}
