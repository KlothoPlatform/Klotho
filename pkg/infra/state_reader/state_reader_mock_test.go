// Code generated by MockGen. DO NOT EDIT.
// Source: ./state_reader.go
//
// Generated by this command:
//
//	mockgen -source=./state_reader.go --destination=./state_reader_mock_test.go --package=statereader
//

// Package statereader is a generated GoMock package.
package statereader

import (
	io "io"
	reflect "reflect"

	construct "github.com/klothoplatform/klotho/pkg/construct"
	knowledgebase "github.com/klothoplatform/klotho/pkg/knowledgebase"
	gomock "go.uber.org/mock/gomock"
)

// MockStateReader is a mock of StateReader interface.
type MockStateReader struct {
	ctrl     *gomock.Controller
	recorder *MockStateReaderMockRecorder
}

// MockStateReaderMockRecorder is the mock recorder for MockStateReader.
type MockStateReaderMockRecorder struct {
	mock *MockStateReader
}

// NewMockStateReader creates a new mock instance.
func NewMockStateReader(ctrl *gomock.Controller) *MockStateReader {
	mock := &MockStateReader{ctrl: ctrl}
	mock.recorder = &MockStateReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateReader) EXPECT() *MockStateReaderMockRecorder {
	return m.recorder
}

// ReadState mocks base method.
func (m *MockStateReader) ReadState(arg0 io.Reader) (construct.Graph, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadState", arg0)
	ret0, _ := ret[0].(construct.Graph)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadState indicates an expected call of ReadState.
func (mr *MockStateReaderMockRecorder) ReadState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadState", reflect.TypeOf((*MockStateReader)(nil).ReadState), arg0)
}

// MockpropertyCorrelation is a mock of propertyCorrelation interface.
type MockpropertyCorrelation struct {
	ctrl     *gomock.Controller
	recorder *MockpropertyCorrelationMockRecorder
}

// MockpropertyCorrelationMockRecorder is the mock recorder for MockpropertyCorrelation.
type MockpropertyCorrelationMockRecorder struct {
	mock *MockpropertyCorrelation
}

// NewMockpropertyCorrelation creates a new mock instance.
func NewMockpropertyCorrelation(ctrl *gomock.Controller) *MockpropertyCorrelation {
	mock := &MockpropertyCorrelation{ctrl: ctrl}
	mock.recorder = &MockpropertyCorrelationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpropertyCorrelation) EXPECT() *MockpropertyCorrelationMockRecorder {
	return m.recorder
}

// checkValueForReferences mocks base method.
func (m *MockpropertyCorrelation) checkValueForReferences(step knowledgebase.OperationalStep, value string, src construct.ResourceId, propertyRef string) (*construct.Edge, *construct.PropertyRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "checkValueForReferences", step, value, src, propertyRef)
	ret0, _ := ret[0].(*construct.Edge)
	ret1, _ := ret[1].(*construct.PropertyRef)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// checkValueForReferences indicates an expected call of checkValueForReferences.
func (mr *MockpropertyCorrelationMockRecorder) checkValueForReferences(step, value, src, propertyRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "checkValueForReferences", reflect.TypeOf((*MockpropertyCorrelation)(nil).checkValueForReferences), step, value, src, propertyRef)
}

// setProperty mocks base method.
func (m *MockpropertyCorrelation) setProperty(resource *construct.Resource, property string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setProperty", resource, property, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// setProperty indicates an expected call of setProperty.
func (mr *MockpropertyCorrelationMockRecorder) setProperty(resource, property, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setProperty", reflect.TypeOf((*MockpropertyCorrelation)(nil).setProperty), resource, property, value)
}
