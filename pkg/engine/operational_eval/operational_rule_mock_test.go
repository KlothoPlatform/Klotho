// Code generated by MockGen. DO NOT EDIT.
// Source: ./operational_rule.go
//
// Generated by this command:
//
//	mockgen -source=./operational_rule.go --destination=../operational_eval/operational_rule_mock_test.go --package=operational_eval
//

// Package operational_eval is a generated GoMock package.
package operational_eval

import (
	reflect "reflect"

	operational_rule "github.com/klothoplatform/klotho/pkg/engine/operational_rule"
	knowledgebase "github.com/klothoplatform/klotho/pkg/knowledgebase"
	gomock "go.uber.org/mock/gomock"
)

// MockOpRuleHandler is a mock of OpRuleHandler interface.
type MockOpRuleHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOpRuleHandlerMockRecorder
}

// MockOpRuleHandlerMockRecorder is the mock recorder for MockOpRuleHandler.
type MockOpRuleHandlerMockRecorder struct {
	mock *MockOpRuleHandler
}

// NewMockOpRuleHandler creates a new mock instance.
func NewMockOpRuleHandler(ctrl *gomock.Controller) *MockOpRuleHandler {
	mock := &MockOpRuleHandler{ctrl: ctrl}
	mock.recorder = &MockOpRuleHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpRuleHandler) EXPECT() *MockOpRuleHandlerMockRecorder {
	return m.recorder
}

// HandleOperationalRule mocks base method.
func (m *MockOpRuleHandler) HandleOperationalRule(rule knowledgebase.OperationalRule, configurationOperator operational_rule.ConfigurationOperator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOperationalRule", rule, configurationOperator)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleOperationalRule indicates an expected call of HandleOperationalRule.
func (mr *MockOpRuleHandlerMockRecorder) HandleOperationalRule(rule, configurationOperator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOperationalRule", reflect.TypeOf((*MockOpRuleHandler)(nil).HandleOperationalRule), rule, configurationOperator)
}

// HandlePropertyRule mocks base method.
func (m *MockOpRuleHandler) HandlePropertyRule(rule knowledgebase.PropertyRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePropertyRule", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePropertyRule indicates an expected call of HandlePropertyRule.
func (mr *MockOpRuleHandlerMockRecorder) HandlePropertyRule(rule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePropertyRule", reflect.TypeOf((*MockOpRuleHandler)(nil).HandlePropertyRule), rule)
}

// SetData mocks base method.
func (m *MockOpRuleHandler) SetData(data knowledgebase.DynamicValueData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetData", data)
}

// SetData indicates an expected call of SetData.
func (mr *MockOpRuleHandlerMockRecorder) SetData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockOpRuleHandler)(nil).SetData), data)
}
