// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: service.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KlothoService_SendIR_FullMethodName      = "/klotho.KlothoService/SendIR"
	KlothoService_HealthCheck_FullMethodName = "/klotho.KlothoService/HealthCheck"
)

// KlothoServiceClient is the client API for KlothoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KlothoServiceClient interface {
	SendIR(ctx context.Context, in *IRRequest, opts ...grpc.CallOption) (*IRReply, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckReply, error)
}

type klothoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKlothoServiceClient(cc grpc.ClientConnInterface) KlothoServiceClient {
	return &klothoServiceClient{cc}
}

func (c *klothoServiceClient) SendIR(ctx context.Context, in *IRRequest, opts ...grpc.CallOption) (*IRReply, error) {
	out := new(IRReply)
	err := c.cc.Invoke(ctx, KlothoService_SendIR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *klothoServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckReply, error) {
	out := new(HealthCheckReply)
	err := c.cc.Invoke(ctx, KlothoService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KlothoServiceServer is the server API for KlothoService service.
// All implementations must embed UnimplementedKlothoServiceServer
// for forward compatibility
type KlothoServiceServer interface {
	SendIR(context.Context, *IRRequest) (*IRReply, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckReply, error)
	mustEmbedUnimplementedKlothoServiceServer()
}

// UnimplementedKlothoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKlothoServiceServer struct {
}

func (UnimplementedKlothoServiceServer) SendIR(context.Context, *IRRequest) (*IRReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIR not implemented")
}
func (UnimplementedKlothoServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedKlothoServiceServer) mustEmbedUnimplementedKlothoServiceServer() {}

// UnsafeKlothoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KlothoServiceServer will
// result in compilation errors.
type UnsafeKlothoServiceServer interface {
	mustEmbedUnimplementedKlothoServiceServer()
}

func RegisterKlothoServiceServer(s grpc.ServiceRegistrar, srv KlothoServiceServer) {
	s.RegisterService(&KlothoService_ServiceDesc, srv)
}

func _KlothoService_SendIR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlothoServiceServer).SendIR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KlothoService_SendIR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlothoServiceServer).SendIR(ctx, req.(*IRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KlothoService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KlothoServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KlothoService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KlothoServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KlothoService_ServiceDesc is the grpc.ServiceDesc for KlothoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KlothoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "klotho.KlothoService",
	HandlerType: (*KlothoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendIR",
			Handler:    _KlothoService_SendIR_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _KlothoService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
