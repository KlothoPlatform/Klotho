resources:
    aws:api_stage:my-api-api:api_stage-0:
        Deployment: aws:api_deployment:my-api-api:api_deployment-0
        RestApi: aws:rest_api:my-api-api
        StageName: stage
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: api_stage-0
    aws:subnet:default-network-vpc:default-network-public-subnet-1:
        CidrBlock: 10.0.0.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-public-subnet-1)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-public-subnet-1
        Type: public
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:subnet:default-network-vpc:default-network-public-subnet-2:
        CidrBlock: 10.0.64.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-public-subnet-2)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-public-subnet-2
        Type: public
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:target_group:my-container-tg:
        HealthCheck:
            Enabled: true
            HealthyThreshold: 5
            Interval: 30
            Protocol: TCP
            Timeout: 5
            UnhealthyThreshold: 2
        Id: preview(id=aws:target_group:my-container-tg)
        Port: 80
        Protocol: TCP
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: my-container-tg
        TargetType: ip
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:api_deployment:my-api-api:api_deployment-0:
        RestApi: aws:rest_api:my-api-api
        Triggers:
            my-container: my-container
            my-container-api_method: my-container-api_method
    aws:rest_api:my-api-api:
        BinaryMediaTypes:
            - application/octet-stream
            - image/*
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: my-api-api
    aws:api_method:my-api-api:my-container-api_method:
        Authorization: NONE
        HttpMethod: ANY
        RequestParameters: {}
        RestApi: aws:rest_api:my-api-api
    aws:api_integration:my-api-api:my-container:
        ConnectionType: VPC_LINK
        IntegrationHttpMethod: ANY
        Method: aws:api_method:my-api-api:my-container-api_method
        RequestParameters: {}
        RestApi: aws:rest_api:my-api-api
        Route: /
        Target: aws:load_balancer:api-my-container-lb
        Type: HTTP_PROXY
        Uri: aws:api_integration:my-api-api:my-container#LbUri
        VpcLink: aws:vpc_link:my-container-api-my-container-lb
    aws:vpc_link:my-container-api-my-container-lb:
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: my-container-api-my-container-lb
        Target: aws:load_balancer:api-my-container-lb
    aws:load_balancer:api-my-container-lb:
        Id: preview(id=aws:load_balancer:api-my-container-lb)
        Scheme: internal
        Subnets:
            - aws:subnet:default-network-vpc:default-network-private-subnet-1
            - aws:subnet:default-network-vpc:default-network-private-subnet-2
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: api-my-container-lb
        Type: network
        imported: true
    aws:ecs_cluster:ecs_cluster-0:
        ClusterSettings:
            - Name: containerInsights
              Value: enabled
        Id: preview(id=aws:ecs_cluster:ecs_cluster-0)
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: ecs_cluster-0
        imported: true
    aws:ecs_service:my-container-service:
        Arn: preview(id=aws:ecs_service:my-container-service)
        AssignPublicIp: false
        Cluster: aws:ecs_cluster:ecs_cluster-0
        DesiredCount: 1
        EnableExecuteCommand: false
        ForceNewDeployment: true
        LaunchType: FARGATE
        LoadBalancers:
            - ContainerName: my-container
              ContainerPort: 80
              TargetGroup: aws:target_group:my-container-tg
        Name: preview(id=aws:ecs_service:my-container-service)
        SecurityGroups:
            - aws:security_group:default-network-vpc:my-container-service-security_group
        Subnets:
            - aws:subnet:default-network-vpc:default-network-private-subnet-1
            - aws:subnet:default-network-vpc:default-network-private-subnet-2
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: my-container-service
        imported: true
    aws:subnet:default-network-vpc:default-network-private-subnet-1:
        CidrBlock: 10.0.128.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-private-subnet-1)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-private-subnet-1
        Type: private
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:subnet:default-network-vpc:default-network-private-subnet-2:
        CidrBlock: 10.0.192.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-private-subnet-2)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-private-subnet-2
        Type: private
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:security_group:default-network-vpc:my-container-service-security_group:
        EgressRules:
            - CidrBlocks:
                - 0.0.0.0/0
              Description: Allows all outbound IPv4 traffic
              FromPort: 0
              Protocol: "-1"
              ToPort: 0
        Id: preview(id=aws:security_group:default-network-vpc:my-container-service-security_group)
        IngressRules:
            - CidrBlocks:
                - 10.0.128.0/18
              Description: Allow ingress traffic from ip addresses within the subnet default-network-private-subnet-1
              FromPort: 0
              Protocol: "-1"
              ToPort: 0
            - CidrBlocks:
                - 10.0.192.0/18
              Description: Allow ingress traffic from ip addresses within the subnet default-network-private-subnet-2
              FromPort: 0
              Protocol: "-1"
              ToPort: 0
            - Description: Allow ingress traffic from within the same security group
              FromPort: 0
              Protocol: "-1"
              Self: true
              ToPort: 0
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: my-container-service-security_group
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:vpc:default-network-vpc:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Id: preview(id=aws:vpc:default-network-vpc)
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-vpc
        imported: true
edges:
    aws:api_stage:my-api-api:api_stage-0 -> aws:api_deployment:my-api-api:api_deployment-0:
    aws:api_stage:my-api-api:api_stage-0 -> aws:rest_api:my-api-api:
    aws:subnet:default-network-vpc:default-network-public-subnet-1 -> aws:vpc:default-network-vpc:
    aws:subnet:default-network-vpc:default-network-public-subnet-2 -> aws:vpc:default-network-vpc:
    aws:target_group:my-container-tg -> aws:ecs_service:my-container-service:
    aws:api_deployment:my-api-api:api_deployment-0 -> aws:api_integration:my-api-api:my-container:
    aws:api_deployment:my-api-api:api_deployment-0 -> aws:api_method:my-api-api:my-container-api_method:
    aws:api_deployment:my-api-api:api_deployment-0 -> aws:rest_api:my-api-api:
    aws:rest_api:my-api-api -> aws:api_integration:my-api-api:my-container:
    aws:rest_api:my-api-api -> aws:api_method:my-api-api:my-container-api_method:
    aws:api_method:my-api-api:my-container-api_method -> aws:api_integration:my-api-api:my-container:
    aws:api_integration:my-api-api:my-container -> aws:vpc_link:my-container-api-my-container-lb:
    aws:vpc_link:my-container-api-my-container-lb -> aws:load_balancer:api-my-container-lb:
    aws:load_balancer:api-my-container-lb -> aws:subnet:default-network-vpc:default-network-private-subnet-1:
    aws:load_balancer:api-my-container-lb -> aws:subnet:default-network-vpc:default-network-private-subnet-2:
    aws:ecs_service:my-container-service -> aws:ecs_cluster:ecs_cluster-0:
    aws:ecs_service:my-container-service -> aws:subnet:default-network-vpc:default-network-private-subnet-1:
    aws:ecs_service:my-container-service -> aws:subnet:default-network-vpc:default-network-private-subnet-2:
    ? aws:subnet:default-network-vpc:default-network-private-subnet-1 -> aws:security_group:default-network-vpc:my-container-service-security_group
    :
    aws:subnet:default-network-vpc:default-network-private-subnet-1 -> aws:vpc:default-network-vpc:
    ? aws:subnet:default-network-vpc:default-network-private-subnet-2 -> aws:security_group:default-network-vpc:my-container-service-security_group
    :
    aws:subnet:default-network-vpc:default-network-private-subnet-2 -> aws:vpc:default-network-vpc:
    aws:security_group:default-network-vpc:my-container-service-security_group -> aws:ecs_service:my-container-service:
    aws:security_group:default-network-vpc:my-container-service-security_group -> aws:vpc:default-network-vpc:
outputs: {}
