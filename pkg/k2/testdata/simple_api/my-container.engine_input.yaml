constraints:
    - scope: application
      operator: must_exist
      node: aws:ecr_image:my-container-image
    - scope: application
      operator: must_exist
      node: aws:ecs_service:my-container-service
    - scope: application
      operator: must_exist
      node: aws:ecs_task_definition:my-container-task
    - scope: application
      operator: must_exist
      node: aws:load_balancer:api-my-container-lb
    - scope: application
      operator: must_exist
      node: aws:load_balancer_listener:api-my-container-lb:api-my-container-lb-listener
    - scope: application
      operator: must_exist
      node: aws:target_group:my-container-tg
    - scope: resource
      operator: equals
      target: aws:ecr_image:my-container-image
      property: Context
      value: /
    - scope: resource
      operator: equals
      target: aws:ecr_image:my-container-image
      property: Dockerfile
      value: /Dockerfile
    - scope: resource
      operator: equals
      target: aws:ecs_service:my-container-service
      property: EnableExecuteCommand
      value: false
    - scope: resource
      operator: equals
      target: aws:ecs_service:my-container-service
      property: LaunchType
      value: FARGATE
    - scope: resource
      operator: equals
      target: aws:ecs_service:my-container-service
      property: LoadBalancers[0]
      value:
        ContainerName: my-container
        ContainerPort: 80
        TargetGroup: aws:target_group:my-container-tg
    - scope: resource
      operator: equals
      target: aws:ecs_service:my-container-service
      property: TaskDefinition
      value: aws:ecs_task_definition:my-container-task
    - scope: resource
      operator: equals
      target: aws:ecs_task_definition:my-container-task
      property: ContainerDefinitions
      value:
        - Cpu: 256
          Environment: null
          Memory: 512
          Name: my-container
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: TCP
    - scope: resource
      operator: equals
      target: aws:ecs_task_definition:my-container-task
      property: ContainerDefinitions[0].Image
      value: aws:ecr_image:my-container-image#ImageName
    - scope: resource
      operator: equals
      target: aws:ecs_task_definition:my-container-task
      property: Cpu
      value: 256
    - scope: resource
      operator: equals
      target: aws:ecs_task_definition:my-container-task
      property: Memory
      value: 512
    - scope: resource
      operator: equals
      target: aws:ecs_task_definition:my-container-task
      property: RequiresCompatibilities
      value:
        - FARGATE
    - scope: resource
      operator: equals
      target: aws:load_balancer:api-my-container-lb
      property: Scheme
      value: internal
    - scope: resource
      operator: equals
      target: aws:load_balancer:api-my-container-lb
      property: Subnets
      value:
        - aws:subnet:default-network-vpc:default-network-private-subnet-1
        - aws:subnet:default-network-vpc:default-network-private-subnet-2
    - scope: resource
      operator: equals
      target: aws:load_balancer:api-my-container-lb
      property: Type
      value: network
    - scope: resource
      operator: equals
      target: aws:load_balancer_listener:api-my-container-lb:api-my-container-lb-listener
      property: LoadBalancer
      value: aws:load_balancer:api-my-container-lb
    - scope: resource
      operator: equals
      target: aws:load_balancer_listener:api-my-container-lb:api-my-container-lb-listener
      property: Port
      value: 80
    - scope: resource
      operator: equals
      target: aws:load_balancer_listener:api-my-container-lb:api-my-container-lb-listener
      property: Protocol
      value: TCP
    - scope: resource
      operator: equals
      target: aws:target_group:my-container-tg
      property: Port
      value: 80
    - scope: resource
      operator: equals
      target: aws:target_group:my-container-tg
      property: Protocol
      value: TCP
    - scope: resource
      operator: equals
      target: aws:target_group:my-container-tg
      property: Vpc
      value: aws:vpc:default-network-vpc
    - scope: edge
      operator: must_exist
      target:
        source: aws:load_balancer:api-my-container-lb
        target: aws:ecs_service:my-container-service
      data: {}
    - scope: edge
      operator: must_exist
      target:
        source: aws:load_balancer_listener:api-my-container-lb:api-my-container-lb-listener
        target: aws:target_group:my-container-tg
      data: {}
    - scope: edge
      operator: must_exist
      target:
        source: aws:target_group:my-container-tg
        target: aws:ecs_service:my-container-service
      data: {}
resources:
    aws:subnet:default-network-vpc:default-network-private-subnet-1:
        CidrBlock: 10.0.128.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-private-subnet-1)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-private-subnet-1
        Type: private
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:subnet:default-network-vpc:default-network-private-subnet-2:
        CidrBlock: 10.0.192.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-private-subnet-2)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-private-subnet-2
        Type: private
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:subnet:default-network-vpc:default-network-public-subnet-1:
        CidrBlock: 10.0.0.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-public-subnet-1)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-public-subnet-1
        Type: public
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:subnet:default-network-vpc:default-network-public-subnet-2:
        CidrBlock: 10.0.64.0/18
        Id: preview(id=aws:subnet:default-network-vpc:default-network-public-subnet-2)
        MapPublicIpOnLaunch: false
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-public-subnet-2
        Type: public
        Vpc: aws:vpc:default-network-vpc
        imported: true
    aws:vpc:default-network-vpc:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Id: preview(id=aws:vpc:default-network-vpc)
        Tags:
            GLOBAL_KLOTHO_TAG: k2
            RESOURCE_NAME: default-network-vpc
        imported: true
edges:
    aws:subnet:default-network-vpc:default-network-private-subnet-1 -> aws:vpc:default-network-vpc:
    aws:subnet:default-network-vpc:default-network-private-subnet-2 -> aws:vpc:default-network-vpc:
    aws:subnet:default-network-vpc:default-network-public-subnet-1 -> aws:vpc:default-network-vpc:
    aws:subnet:default-network-vpc:default-network-public-subnet-2 -> aws:vpc:default-network-vpc:
outputs: {}
