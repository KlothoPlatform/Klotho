id: klotho.aws.Container
version: 1.0.0
description: A construct for creating a docker container from an image or Dockerfile
resources:
  RestApi:
    type: aws:rest_api
    name: ${inputs:Name}-api
  RootApiMethod:
    type: aws:api_method
    namespace: ${resources:RestApi.Name}
    name: root-method
    properties:
      HttpMethod: ANY
  RootApiIntegration:
    type: aws:api_integration
    namespace: ${resources:RestApi.Name}
    name: root-integration
    properties:
      Method: ${resources:RootApiMethod}
      Route: /
  ProxyApiMethod:
    type: aws:api_method
    namespace: ${resources:RestApi.Name}
    name: proxy-any-method
    properties:
      HttpMethod: ANY
  ProxyApiIntegration:
    type: aws:api_integration
    namespace: ${resources:RestApi.Name}
    name: proxy-any-integration
    properties:
      Method: ${resources:ProxyApiMethod}
      Route: /{proxy+}
  EcrImage:
    type: aws:ecr_image
    name: ${inputs:Name}-image
    properties:
      BaseImage: busybox
  TaskDefinition:
    type: aws:ecs_task_definition
    name: ${inputs:Name}-task
    properties:
      Cpu: ${inputs:Cpu}
      Memory: ${inputs:Memory}
      ContainerDefinitions[0].PortMappings[0]:
        ContainerPort: ${inputs:Port}
        HostPort: ${inputs:Port}
      ContainerDefinitions[0].Cpu: ${inputs:Cpu}
      ContainerDefinitions[0].Memory: ${inputs:Memory}
      ContainerDefinitions[0].Image: ${resources:EcrImage#ImageName}
      RequiresCompatibilities:
       - FARGATE
  Service:
    type: aws:ecs_service
    name: ${inputs:Name}-service
    properties:
      LaunchType: FARGATE
      TaskDefinition: ${resources:TaskDefinition}
      LoadBalancers[0].ContainerPort: ${inputs:Port}

edges:
  - from: RestApi
    to: ProxyApiIntegration

  - from: ProxyApiMethod
    to: ProxyApiIntegration

  - from: ProxyApiIntegration
    to: Service

  - from: RestApi
    to: RootApiIntegration

  - from: RootApiMethod
    to: RootApiIntegration

  - from: RootApiIntegration
    to: Service

inputs:
  SourceHash:
    name: Source Hash
    description: The hash of the source code computed by the language SDK to determine if the function has changed and needs to be redeployed
    type: string
    hidden: true
  Cpu:
    name: CPU
    description: The amount of CPU to allocate to the container
    type: number
    default: 256
    validation:
      minimum: 1
      maximum: 4096
  Memory:
    name: Memory
    description: The amount of memory to allocate to the container
    type: number
    default: 512
    validation:
      minimum: 1
      maximum: 4096
  Context:
    name: Context
    description: The context to use to build the container
    type: string
    default: .
    validation:
      minLength: 1
      maxLength: 63
  Dockerfile:
    name: Dockerfile
    description: The Dockerfile to use to build the container
    type: string
    default: Dockerfile
    validation:
      minLength: 1
      maxLength: 63
  Image:
      name: Image
      description: The image to use for the container
      type: string
      validation:
          minLength: 1
          maxLength: 63
  Port:
      name: Port
      description: The port to expose on the container
      type: number
      default: 80
      validation:
          minimum: 1
          maximum: 65535
  Network:
    name: Network
    description: The network to deploy the container to
    type: Construct<klotho.aws.Network>

outputs:
  ServiceArn:
    description: The ARN of the service
    value: ${resources:Service#Arn}
  TaskDefinitionArn:
    description: The ARN of the task definition
    value: ${resources:TaskDefinition#Arn}

input_rules:
  - if: and (input "Dockerfile") (not (input "Image"))
    then:
      resources:
        EcrImage:
          properties:
            ImageName: ${inputs:Name}
            Dockerfile: ${inputs:Dockerfile}
            Context: ${inputs:Context}
    else:
      resources:
        EcrImage:
          properties:
            ImageName: ${inputs:Image}
