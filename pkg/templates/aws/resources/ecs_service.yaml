qualified_type_name: aws:ecs_service
display_name: ECS Service

properties:
  AssignPublicIp:
    type: bool
    default_value: false
    description: Indicates whether the task's elastic network interface receives a
      public IP address
  CapacityProviderStrategies:
    type: set
    operational_rule:
      if: '{{ hasUpstream "aws:ecs_capacity_provider" (downstream "aws:ecs_cluster" .Self) }}'
      value: 
        - CapacityProvider: '{{ fieldRef "Id" (upstream "aws:ecs_capacity_provider" (downstream "aws:ecs_cluster" .Self)) }}'
          Weight: 1
    properties:
      CapacityProvider:
        type: string
        description: Short name of the capacity provider.
      Weight:
        type: int
        description: Relative percentage of the total number of launched tasks that should use the specified capacity provider.
      Base:
        type: int
        description: Number of tasks, at a minimum, to run on the specified capacity provider.
  Cluster:
    type: resource(aws:ecs_cluster)
    operational_rule:
      step:
        direction: downstream
        resources:
          - aws:ecs_cluster
    description: The Amazon ECS cluster to which the service is to be deployed
  DeploymentCircuitBreaker:
    type: map
    properties:
      Enable:
        type: bool
      Rollback:
        type: bool
  DesiredCount:
    type: int
    default_value: 1
    description: The number of instantiations of the specified task definition to
      keep running on the service
  EnableExecuteCommand:
    type: bool
    default_value: false
    description: Whether to enable Amazon ECS Exec for the service. See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html
  HealthCheckGracePeriodSeconds:
    type: int
    description: Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
  ForceNewDeployment:
    type: bool
    default_value: true
    description: Specifies whether to force a new deployment of the service
  LaunchType:
    type: string
    allowed_values:
      - EC2
      - FARGATE
      - EXTERNAL
    description: The launch type on which to run your service
    operational_rule:
      if: '{{ not (hasField "CapacityProviderStrategies" .Self) }}'
      value: FARGATE
  LoadBalancers:
    type: list(map)
    properties:
      TargetGroup:
        type: resource(aws:target_group)
      ContainerName:
        type: string
      ContainerPort:
        type: int
  SecurityGroups:
    type: list(resource(aws:security_group))
    operational_rule:
      step:
        direction: upstream
        resources:
          - aws:security_group
        unique: true
    description: The security groups associated with the task or service
  Subnets:
    type: list(resource(aws:subnet))
    operational_rule:
      step:
        direction: downstream
        num_needed: 2
        resources:
          - selector: aws:subnet
            properties:
              Type: private
          - aws:subnet
    description: The subnets associated with the task or service
  TaskDefinition:
    type: resource(aws:ecs_task_definition)
    operational_rule:
      step:
        direction: downstream
        resources:
          - aws:ecs_task_definition:{{ .Self.Name }}
        unique: true
    description: The family and revision (family:revision) or full Amazon Resource
      Name (ARN) of the task definition to run in the service
  ServiceRegistries:
    type: map
    properties:
      RegistryArn:
        type: string
        description: ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service
  ServiceConnectConfiguration:
    type: map
    properties:
      Enabled:
        type: bool
      LogConfiguration:
        type: map
        description: The log configuration specification for the container
        properties:
          LogDriver:
            type: string
            description: The log driver to use for the container
            operational_rule:
              if: |
                {{ hasField "ServiceConnectConfiguration" .Self }}
              value: awslogs
          Options:
            type: map(string,string)
            description: The configuration options to send to the log driver
            properties:
              awslogs-group:
                type: string
                description: The log group to send stdout to
                operational_rule:
                  if: |
                    {{ hasField "ServiceConnectConfiguration" .Self }}
                  step:
                    direction: downstream
                    resources:
                      - aws:log_group:{{ .Self.Name }}-log-group
                    unique: true
                    use_property_ref: LogGroupName
              awslogs-region:
                type: string
                description: The region which your log group will exist in
                operational_rule:
                  if: |
                    {{ hasField "ServiceConnectConfiguration" .Self }}
                  value: '{{ fieldRef "Name" (downstream "aws:region" .Self) }}'
          SecretOptions:
            type: list
            properties:
              Name:
                type: string
                description: The name of the secret
              ValueFrom:
                type: string
                description: The secret to expose to the container
            description: The secrets to pass to the log configuration
      Namespace:
        type: string
        description: The namespace name or ARN of the aws.servicediscovery.HttpNamespace for use with Service Connect.
        operational_rule:
          if: |
            {{ hasField "ServiceConnectConfiguration" .Self }}
          step:
            direction: upstream
            resources:
              - aws:service_discovery_http_namespace
            use_property_ref: Arn
      Services:
        type: list
        properties:
          PortName:
            type: string
            description: The name of one of the portMappings from all the containers in the task definition of this Amazon ECS service.
          ClientAlias:
            type: set
            properties:
              Port:
                type: int
                description: The listening port number for the Service Connect proxy. This port is available inside of all of the tasks within the same namespace.
              DnsName:
                type: string
                description: The name that you use in the applications of client tasks to connect to this service.
          DiscoveryName:
            type: string
            description: The name of the new AWS Cloud Map service that Amazon ECS creates for this Amazon ECS service.
          IngressPortOverride:
            type: int
            description: The port number for the Service Connect proxy to listen on.
          Timeout:
            type: map
            properties:
              IdleTimeoutSeconds:
                type: int
                description: The amount of time in seconds a connection will stay active while idle. A value of 0 can be set to disable idleTimeout.
              PerRequestTimeoutSeconds:
                type: int
                description: The amount of time in seconds for the upstream to respond with a complete response per request. A value of 0 can be set to disable perRequestTimeout. Can only be set when appProtocol isn't TCP.
          Tls:
            type: map
            properties:
              IssuerCertAuthority:
                type: map
                description: The details of the certificate authority which will issue the certificate.
                properties:
                  AwsPcaAuthorityArn:
                    type: string
                    description: The ARN of the aws.acmpca.CertificateAuthority used to create the TLS Certificates.
              KmsKey:
                type: string
                description: The KMS key used to encrypt the private key in Secrets Manager.
              RoleArn:
                type: string
                description: The ARN of the IAM Role that's associated with the Service Connect TLS.
  aws:tags:
    type: model
  Arn:
    type: string
    description: The Amazon Resource Name (ARN) that identifies the service
    deploy_time: true
    configuration_disabled: true
  Name:
    type: string
    description: The name of the service
    deploy_time: true
    configuration_disabled: true
    required: true


additional_rules:
  - if: '{{ (hasDownstream "aws:ecs_cluster" .Self) }}'
    steps:
    - direction: downstream
      unique: true
      resources:
        - selector: 'aws:cloudwatch_alarm:{{ .Self.Name }}-MemoryUtilization'
          properties:
            Namespace: AWS/ECS
            MetricName: MemoryUtilization
            ComparisonOperator: GreaterThanOrEqualToThreshold
            Threshold: 90
            Period: 60
            EvaluationPeriods: 2
            Statistic: Average
            AlarmDescription: This metric checks for MemoryUtilization in the ECS service
            Dimensions:
              ServiceName: '{{ fieldRef "Name" .Self }}'
              ClusterName: '{{ fieldRef "Id" (downstream "aws:ecs_cluster" .Self) }}'
    - direction: downstream
      unique: true
      resources:
        - selector: 'aws:cloudwatch_alarm:{{ .Self.Name }}-CPUUtilization'
          properties:
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            ComparisonOperator: GreaterThanOrEqualToThreshold
            Threshold: 90
            Period: 60
            EvaluationPeriods: 2
            Statistic: Average
            AlarmDescription: This metric checks for CPUUtilization in the ECS service
            Dimensions:
              ServiceName: '{{ fieldRef "Name" .Self }}'
              ClusterName: '{{ fieldRef "Id" (downstream "aws:ecs_cluster" .Self) }}'

  # TODO: Make this only apply if the cluster has container insights enabled. Currently not supported in operational eval

    - direction: downstream
      unique: true
      resources:
        - selector: 'aws:cloudwatch_alarm:{{ .Self.Name }}-RunningTaskCount'
          properties:
            Namespace: AWS/ECS
            MetricName: RunningTaskCount
            ComparisonOperator: LessThanThreshold
            Threshold: '{{ fieldValue "DesiredCount" .Self }}'
            Period: 60
            EvaluationPeriods: 1
            Statistic: Average
            AlarmDescription: This metric checks for any stopped tasks in the ECS service
            Dimensions:
              ServiceName: '{{ fieldRef "Name" .Self }}'
              ClusterName: '{{ fieldRef "Id" (downstream "aws:ecs_cluster" .Self) }}'


consumption:
  consumed:
    - model: EnvironmentVariables
      property_path: ContainerDefinitions[0].Environment
      resource: '{{ fieldValue "TaskDefinition" .Self }}'
      converter: |
        [
        {{ $i := 0}}
        {{ range $key, $value := . }}
          {
            "Name": "{{ $key }}",
            "Value": "{{ $value }}"
          }{{if ne $i (sub (len $) 1)}},{{end}}{{ $i = add $i 1 }}
        {{ end }}
        ]
  emitted:
    - model: EnvironmentVariables
      value:
        '{{ .Self.Name }}_ECS_SERVICE_NAME': '{{ .Self.Name }}'

path_satisfaction:
  as_target:
    - network
    - service_discovery
  as_source:
    - network#Subnets

classification:
  is:
    - compute
    - container
    - long_running

delete_context:
  requires_no_upstream: true
  requires_no_downstream: true
views:
  dataflow: big

deployment_permissions:
  deploy: ['ecs:CreateService']
  tear_down: ['ecs:DeleteService']
  update: ['ecs:UpdateService']
