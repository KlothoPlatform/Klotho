"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Emitter = void 0;
const events = require("events");
const client_sns_1 = require("@aws-sdk/client-sns");
const client_s3_1 = require("@aws-sdk/client-s3");
const uuid_1 = require("uuid");
const crypto = require("crypto");
// @ts-ignore
const dispatcher_1 = require("./dispatcher");
const payloadBucketPhysicalName = process.env.KLOTHO_PROXY_RESOURCE_NAME;
const appName = '{{.AppName}}';
// The account-level ARN for sns. The topics must be account-wide unique
const { SNS_ARN_BASE } = process.env;
class Emitter extends events.EventEmitter {
    constructor(path, name, id) {
        super();
        this.path = path;
        this.name = name;
        this.id = id;
        this.client = new client_sns_1.SNSClient({});
        this.s3 = new client_s3_1.S3Client({});
    }
    on(eventName, listener) {
        // wrap the listener and add it to the inflight promises in case the listener is an async function
        // otherwise a lambda will prematurely exist before the listener has run
        super.on(eventName, (...args) => {
            (0, dispatcher_1.addInflight)(listener(...args));
        });
        return this;
    }
    /**
     * Must match the format used in deploylib
     */
    topic(event) {
        const topic = `${appName}_${this.id}_${event}`;
        if (topic.length <= 256) {
            return topic;
        }
        console.log('topic too long, hashing', { topic });
        const hash = crypto.createHash('sha256');
        hash.update(topic);
        return `${hash.digest('hex')}_${event}`;
    }
    async save(event, ...args) {
        const msgId = (0, uuid_1.v4)();
        const key = `${this.path.replace(/[^0-9a-zA-Z_-]/, '-')}_${this.name}/${event}/${msgId}`;
        await this.s3.send(new client_s3_1.PutObjectCommand({
            Bucket: payloadBucketPhysicalName,
            Key: key,
            Body: JSON.stringify(args),
        }));
        return key;
    }
    async send(event, ...args) {
        const topic = this.topic(event);
        const arn = `${SNS_ARN_BASE}:${topic}`;
        const payloadId = await this.save(event, ...args);
        const resp = await this.client.send(new client_sns_1.PublishCommand({
            TopicArn: arn,
            Message: payloadId,
            MessageAttributes: {
                Path: {
                    DataType: 'String',
                    StringValue: this.path,
                },
                Name: {
                    DataType: 'String',
                    StringValue: this.name,
                },
                Event: {
                    DataType: 'String',
                    StringValue: event,
                },
            },
        }));
        console.info('Sent message', {
            event,
            topic,
            arn,
            payloadId,
            messageId: resp.MessageId,
        });
    }
    /**
     * @param record see https://docs.aws.amazon.com/lambda/latest/dg/with-sns.html
     */
    async receive(record) {
        const { Message: payloadId, MessageAttributes: attribs } = record.Sns;
        const eventName = attribs.Event.Value;
        const obj = await this.s3.send(new client_s3_1.GetObjectCommand({
            Bucket: payloadBucketPhysicalName,
            Key: payloadId,
        }));
        if (!obj.Body)
            return;
        const argsStr = await streamToString(obj.Body);
        // TODO - would be nice to keep these around for a little for debugging/auditing purposes.
        const del = this.s3.send(new client_s3_1.DeleteObjectCommand({
            Bucket: payloadBucketPhysicalName,
            Key: payloadId,
        }));
        (0, dispatcher_1.addInflight)(del);
        const args = JSON.parse(argsStr);
        this.emit(eventName, ...args);
    }
}
exports.Emitter = Emitter;
/**
 * see https://github.com/aws/aws-sdk-js-v3/issues/1877#issuecomment-755446927
 */
async function streamToString(stream) {
    return await new Promise((resolve, reject) => {
        const chunks = [];
        stream.on('data', (chunk) => chunks.push(chunk));
        stream.on('error', reject);
        stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf-8')));
    });
}
